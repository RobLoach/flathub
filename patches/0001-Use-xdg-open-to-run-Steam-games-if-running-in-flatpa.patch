diff --git a/lutris/runners/steam.py b/lutris/runners/steam.py
index 62f961b..10a44e2 100644
--- a/lutris/runners/steam.py
+++ b/lutris/runners/steam.py
@@ -189,6 +189,9 @@ class steam(Runner):
                 return path[: -len("SteamApps")]
 
     def get_executable(self):
+        if system.LINUX_SYSTEM.is_flatpak:
+            # Use xdg-open for Steam URIs in Flatpak
+            return system.find_executable("xdg-open")
         if self.runner_config.get("lsi_steam") and system.find_executable("lsi-steam"):
             return system.find_executable("lsi-steam")
         runner_executable = self.runner_config.get("runner_executable")
@@ -209,6 +212,8 @@ class steam(Runner):
     def launch_args(self):
         """Provide launch arguments for Steam"""
         args = [self.get_executable()]
+        if system.LINUX_SYSTEM.is_flatpak:
+            return args
         if self.runner_config.get("start_in_big_picture"):
             args.append("-bigpicture")
         return args + shlex.split(self.runner_config.get("args") or "")
@@ -324,9 +329,14 @@ class steam(Runner):
         else:
             # Start through steam
 
+            command = self.launch_args
+            if system.LINUX_SYSTEM.is_flatpak:
+                return {
+                    "command": command + ["steam://rungameid/%s" % self.appid],
+                    "env": self.get_env(),
+                }
             # Get current steam pid to act as the root pid instead of lutris
             self.original_steampid = get_steam_pid()
-            command = self.launch_args
             if game_args:
                 for arg in shlex.split(game_args):
                     command.append(arg)
diff --git a/lutris/util/linux.py b/lutris/util/linux.py
index f1630e3..1df8ace 100644
--- a/lutris/util/linux.py
+++ b/lutris/util/linux.py
@@ -108,6 +108,8 @@ class LinuxSystem:
     required_components = ["OPENGL", "VULKAN"]
     optional_components = ["WINE", "GAMEMODE"]
 
+    flatpak_info_path="/.flatpak-info"
+
     def __init__(self):
         for key in ("COMMANDS", "TERMINALS"):
             self._cache[key] = {}
@@ -205,6 +207,11 @@ class LinuxSystem:
         logger.warning("Unsupported architecture %s", machine)
 
     @property
+    def is_flatpak(self):
+        """Check is we are running inside Flatpak sandbox"""
+        return os.path.exists(self.flatpak_info_path)
+
+    @property
     def runtime_architectures(self):
         """Return the architectures supported on this machine"""
         if self.arch == "x86_64":
