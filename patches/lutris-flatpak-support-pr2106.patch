diff --git a/lutris/game.py b/lutris/game.py
index d2500888..1358ae1d 100644
--- a/lutris/game.py
+++ b/lutris/game.py
@@ -18,6 +18,7 @@ from lutris.config import LutrisConfig
 from lutris.command import MonitoredCommand
 from lutris.gui import dialogs
 from lutris.util.timer import Timer
+from lutris.util.linux import LINUX_SYSTEM
 from lutris.discord import Presence
 from lutris.settings import DEFAULT_DISCORD_CLIENT_ID
 
@@ -251,7 +252,7 @@ class Game(GObject.Object):
                 dialogs.ErrorDialog(
                     "Runtime currently updating", "Game might not work as expected"
                 )
-        if "wine" in self.runner_name and not wine.get_system_wine_version():
+        if "wine" in self.runner_name and not wine.get_system_wine_version() and not LINUX_SYSTEM.is_flatpak:
 
             # TODO find a reference to the root window or better yet a way not
             # to have Gtk dependent code in this class.
diff --git a/lutris/runners/steam.py b/lutris/runners/steam.py
index 848428ac..4834df84 100644
--- a/lutris/runners/steam.py
+++ b/lutris/runners/steam.py
@@ -41,7 +41,6 @@ class steam(Runner):
     human_name = "Steam"
     platforms = ["Linux"]
     runner_executable = "steam"
-    runnable_alone = True
     game_options = [
         {
             "option": "appid",
@@ -143,6 +142,10 @@ class steam(Runner):
         self.no_game_remove_warning = True
         self.original_steampid = None
 
+    @property
+    def runnable_alone(self):
+        return not system.LINUX_SYSTEM.is_flatpak
+
     @property
     def appid(self):
         return self.game_config.get("appid") or ""
@@ -186,6 +189,9 @@ class steam(Runner):
                 return path[: -len("SteamApps")]
 
     def get_executable(self):
+        if system.LINUX_SYSTEM.is_flatpak:
+            # Use xdg-open for Steam URIs in Flatpak
+            return system.find_executable("xdg-open")
         if self.runner_config.get("lsi_steam") and system.find_executable("lsi-steam"):
             return system.find_executable("lsi-steam")
         runner_executable = self.runner_config.get("runner_executable")
@@ -206,6 +212,8 @@ class steam(Runner):
     def launch_args(self):
         """Provide launch arguments for Steam"""
         args = [self.get_executable()]
+        if system.LINUX_SYSTEM.is_flatpak:
+            return args
         if self.runner_config.get("start_in_big_picture"):
             args.append("-bigpicture")
         return args + shlex.split(self.runner_config.get("args") or "")
@@ -316,6 +324,12 @@ class steam(Runner):
         else:
             # Start through steam
 
+            if system.LINUX_SYSTEM.is_flatpak:
+                return {
+                    "command": self.launch_args + ["steam://rungameid/%s" % self.appid],
+                    "env": self.get_env(),
+                }
+
             # Get current steam pid to act as the root pid instead of lutris
             self.original_steampid = get_steam_pid()
             command = self.launch_args
diff --git a/lutris/util/linux.py b/lutris/util/linux.py
index 5a4bff66..a220f69c 100644
--- a/lutris/util/linux.py
+++ b/lutris/util/linux.py
@@ -108,6 +108,8 @@ class LinuxSystem:
     required_components = ["OPENGL", "VULKAN"]
     optional_components = ["WINE", "GAMEMODE"]
 
+    flatpak_info_path="/.flatpak-info"
+
     def __init__(self):
         for key in ("COMMANDS", "TERMINALS"):
             self._cache[key] = {}
@@ -204,6 +206,11 @@ class LinuxSystem:
             return "armv7"
         logger.warning("Unsupported architecture %s", machine)
 
+    @property
+    def is_flatpak(self):
+        """Check is we are running inside Flatpak sandbox"""
+        return os.path.exists(self.flatpak_info_path)
+
     @property
     def runtime_architectures(self):
         """Return the architectures supported on this machine"""
